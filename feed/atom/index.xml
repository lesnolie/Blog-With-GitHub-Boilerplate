<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><id>/</id><title>不愧不忘</title><updated>2024-03-16T06:01:33.815247+08:06</updated><author><name>LESLIE</name><email>lesliezhang08@gmail.com</email></author><link href="/" rel="alternate"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><logo>/logo.jpg</logo><subtitle>我喜欢猫</subtitle><entry><id>/archives/Ai太令人激动了/</id><title>Ai太令人激动了</title><updated>2024-03-16T06:01:33.815497+00:00</updated><author><name>Leslie</name><email>lesliezhang08@gmail.com</email><uri>https://blog.lesliemm.xyz</uri></author><content>&lt;h3&gt;ai改变世界&lt;/h3&gt;
&lt;p&gt;今日看完了书，侥幸在推上看见了这样一个网页:
利用openai自动写邮件，支持多语言。
&lt;a href="https://email-helper.vercel.app/"&gt;emailhelper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用案例&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 23.110151187904968" &gt;&lt;img loading="lazy" width="1284" height="2778" src="https://user-images.githubusercontent.com/81410185/215315896-5b929ec0-1194-490f-875d-0c14878c0c88.png" /&gt;&lt;figcaption&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 23.110151187904968" &gt;&lt;img loading="lazy" width="1284" height="2778" src="https://user-images.githubusercontent.com/81410185/215315892-95b6996e-8de1-4480-aa1d-0cfd8dbce80f.png" /&gt;&lt;figcaption&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;简单输入你想表达的内容，会自动生成商业邮件。&lt;/p&gt;
&lt;p&gt;并且还可以自行搭建。&lt;/p&gt;
&lt;h3&gt;激动&lt;/h3&gt;
&lt;p&gt;我的工作需要面对大量的细节处理，ai的出现可以让我快速的整理数据，整理表格，整理邮件。甚至以后开公司都可以减少大量开支。&lt;/p&gt;
&lt;h3&gt;担忧&lt;/h3&gt;
&lt;p&gt;ai取代人类，但会使用ai是不是还有点希望？&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/lesnolie/Marverick/issues/23"&gt;Ai太令人激动了&lt;/a&gt;&lt;/p&gt;
</content><link href="/archives/Ai太令人激动了/"/><published>2023-01-29T08:00:00+08:06</published></entry><entry><id>/archives/满江红2/</id><title>满江红2</title><updated>2024-03-16T06:01:33.815477+00:00</updated><author><name>Leslie</name><email>lesliezhang08@gmail.com</email><uri>https://blog.lesliemm.xyz</uri></author><content>&lt;p&gt;记2023年第一次和嘉敏观影。&lt;/p&gt;
&lt;p&gt;前几日看到说满江红剧情有问题，鄙人观影之时，并未发现有个问题，但这几天回想之下，确有几处不太明白。刚好嘉敏还没有观影，于是二刷满江红。&lt;/p&gt;
&lt;h3&gt;破案核心&lt;/h3&gt;
&lt;p&gt;孙将军带着张大见秦桧，秦桧给予令牌，所有人退下后，何立的两句话是本片的关键所在。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能让任何人知道信的内容&lt;/li&gt;
&lt;li&gt;不能让人知道有信这回事儿
注意，这里为递进关系，当时屋内有五人，两个聋哑女，秦桧，何和武两位总管。当时，岳飞已死，宋朝羸弱，摇摇欲坠，秦桧独揽大权，独断专行，满朝臣子义愤填膺却又无可奈何。唯一能够威胁秦桧地位的便是“秦桧通金”。所以秦桧十分在意“名分”。&lt;br&gt;
此时，何先说不能让人知道信的内容，主要原因是自己也想活。秦桧沉默不言，何遂明白秦桧之意，于是补充说道，不能让人知道有信这回事儿。秦桧言:有进步。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;此时，何已明白，自己和武也在知道有信这件事之内。此后，他只做了两件事:1.杀掉所有知道这件事的人。2.想方法活下去。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;杀王将军&lt;/h3&gt;
&lt;p&gt;王将军之死，是岳家军的计划。&lt;br&gt;
孙首次带张见秦桧之时，王说，谁见宰相他说的算。这里给出重要信息，要想接近秦桧，必须铲除王。&lt;br&gt;
于是丁三旺设计陷害王。&lt;br&gt;
此计划还有一个作用，让孙入局，使孙面见秦桧更加容易。&lt;br&gt;
何为何要哎？何没必要杀王，因为王不知道信的事，何哎的原因是因为信比王更重要，信关乎他的性命，王不重要。&lt;/p&gt;
&lt;h3&gt;杀刘喜&lt;/h3&gt;
&lt;p&gt;何贵为总管，知道宰相府上上下下一切底细。这里有一点影片讲的不是很清楚，张大是兵，何是否也有本事知道兵中之事。我的意见是，他不知道。&lt;br&gt;
刘喜全招，何已然拿到信，为何最后放过张大？因为何要做的两件事都还没做到，此时，何并不知道到底有多少人参与此事，也不知道如何保命，更不知道有什么方法杀了武。如果此时他直接将信交给秦桧，他必死，如果他看了再给秦桧，他还是必死。他得想办法，让自己知道信的内容，并且秦桧还不知道他知道了信的内容，或者说，秦桧同意他知道信的内容。于是他将计就计，将信给了他们。&lt;/p&gt;
&lt;h3&gt;杀武义淳&lt;/h3&gt;
&lt;p&gt;何不能随便杀武，因为问了秦两个问题，第一，武是皇亲国戚，第二，武带有御赐金牌。何杀不了武，只有秦能杀武。何必须让秦开口，说可以杀武，他才有理由动手，不然按照秦的个性，日后必然安个罪名。&lt;br&gt;
秦同意了。&lt;br&gt;
岳家军也要杀武，他们的目的是杀掉所有比何官大的人。张给武献计，此时不知道到底是谁在将计就计，双方到底谁看破了谁。张知道何一定会杀武，只是差了个理由，还是说何已经知道了张串通武谋杀秦桧。因为只有谋杀秦桧这个理由，何杀武秦桧才不会日后安罪名，其他都能有说法杀何。
注意，庭审的时候，从头到尾没说信的事儿，只说了是刺客。只有打发了所有人以后，才开始说信的事儿。杀武义淳要让所有人知道，并记录在案，不能讲信的时候杀武，这也是何的技巧。&lt;/p&gt;
&lt;h3&gt;杀瑶琴&lt;/h3&gt;
&lt;p&gt;案件到了此时，何本没打算让瑶琴杀张，他本意应该是，让瑶琴背出信的内容，放走瑶琴，带着张见秦。影片中已讲了为什么，他给自己找了个正当看信的机会，并准备放走瑶琴，保全自己。但没想到瑶琴识破他的弹簧刀机关，在大意下被瑶琴所杀。&lt;br&gt;
片尾，秦说何和孙本配合套出信的内容即可，但何贪心，想获得秦的把柄，最终落得死的下场。&lt;br&gt;
能够杀何，其实是岳家军的幸运。何已经够小心了，最后时刻还让瑶琴用自己的刀。他当时肯定觉得，自己武功高强，刀又有机关，于是非常大意。&lt;br&gt;
岳家军从头到尾都没想到如何杀何立，一开始他们觉得何是个文弱书生，没想到一手短刃玩的出神入化。之后刘喜又没打过何，此时岳家军对何已经无可奈何。&lt;br&gt;
个人解读，有可能是过度解读，影片中，张大说金使从未来过，他其实是在试探何，不然根本没必要有这出戏。张大说自己想活，其实是说给何听的，他在试探何想不想活，他成功了，从何的回答中听出了何也想活:秦问何你觉得呢，何说我觉得可以。&lt;br&gt;
张此时明白，如果有活命的机会，何必然会把握。&lt;br&gt;
秦说，我在乎的是名分，这其实也是张让秦说的，他想让何知道，你必死。当然也是告诉孙，你必死。&lt;br&gt;
于是，才有了何单独会见瑶琴，并给了瑶琴一把刀。&lt;/p&gt;
&lt;h3&gt;杀秦桧&lt;/h3&gt;
&lt;p&gt;写到这里，我突然发现，无论是张还是何，都在布局，层层布局，层层交手，真是过瘾。&lt;br&gt;
岳家军一开始的目标就只有一个，让孙动手，心就必须满足两个条件:孙想动手，孙不得不动手。
第一个目标，岳家军用丁三旺，刘喜，瑶琴以及张大的命告诉孙，唤醒了孙心中对姐姐的思念。但这还不够，不当走狗并不能让他动手，因为他如果有的选的活，他就可以不动手。&lt;br&gt;
到这里，全片最重要的一点来了，那就是，所有人都没得选，但凡有得选，都凑不成这一桌麻将。&lt;br&gt;
何没得选，必须要为自己留后路。&lt;br&gt;
武没得选，本文虽然没有细说武的一举一动，但武也是在为自己留后路。要知道，秦说所有知道这件事的人都要死的时候，武也在场。&lt;br&gt;
所以，张要让孙没得选。&lt;br&gt;
孙赌过，他舍身挡刀一方面是为了博取秦的信任，另一方面是赌秦不会杀他。&lt;br&gt;
但秦要杀他的左右护卫，让他知道，他也没得选，现在不死，日后必死。&lt;/p&gt;
&lt;p&gt;所以第二个目标，孙不得不动手，我严重怀疑张是知道当孙当上总管以后，秦一定会杀孙的护卫。&lt;br&gt;
因为何没有贴身护卫。&lt;/p&gt;
&lt;p&gt;至此，满江红真可谓斗智斗勇，一出好戏。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/lesnolie/Marverick/issues/24"&gt;满江红2&lt;/a&gt;&lt;/p&gt;
</content><link href="/archives/满江红2/"/><published>2023-01-30T08:00:00+08:06</published></entry><entry><id>/archives/利用chatgpt优化亚马逊1.0/</id><title>利用chatgpt优化亚马逊1.0</title><updated>2024-03-16T06:01:33.815458+00:00</updated><author><name>Leslie</name><email>lesliezhang08@gmail.com</email><uri>https://blog.lesliemm.xyz</uri></author><content>&lt;h2&gt;利用chatgpt优化亚马逊的标题&lt;/h2&gt;
&lt;h3&gt;Intro&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;搜集排名靠前的产品标题&lt;/li&gt;
&lt;li&gt;搜集品牌分析中核心关键字和长尾词（ABA）&lt;/li&gt;
&lt;li&gt;整理后询问chatgpt，根据亚马逊A10算法优化生成产品标题
### Use&lt;/li&gt;
&lt;li&gt;获取亚马逊品牌分析提供的亚马逊搜索词：
&lt;pre&gt;&lt;code&gt;”スマホ ショルダーバッグ“，”スマホショルダー“，”スマホショルダー レディース“，”スマホショルダー“&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;获取各个关键词优秀的产品标题：
&lt;figure style="flex: 148.3430799220273" &gt;&lt;img loading="lazy" width="1522" height="513" src="https://raw.githubusercontent.com/lesnolie/img/master/obsidian/20230203135836.png" /&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;在chatgpt中输入问题：
&lt;figure style="flex: 21.598821638993037" &gt;&lt;img loading="lazy" width="1613" height="3734" src="https://raw.githubusercontent.com/lesnolie/img/master/obsidian/20230203141100.png" /&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;ol&gt;
&lt;li&gt;询问方式：请分析我搜集的标题，优化生成符合亚马逊A10算法的标题，注意：产品销售对象为：xx。&lt;/li&gt;
&lt;li&gt;为什么你会生成这个标题，请讲明原因。
### 补充&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;更换提问方式：例如，NOW YOU ARE BASED ON AMAZON A10 SYSTEM, I HAVE WRITE SOME KEYWORD ABOT THIS PRODUCT, PLEASE MAKE A PRODUCT TITLE &amp;amp; TELL ME WHY.(XXX IS THE MOST IMPORTANT KEYWORD.)&lt;/li&gt;
&lt;li&gt;可以分析标题，描述，review等等
### TODO&lt;/li&gt;
&lt;li&gt;分析广告&lt;/li&gt;
&lt;li&gt;开发产品&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/lesnolie/Marverick/issues/25"&gt;利用chatgpt优化亚马逊1.0&lt;/a&gt;&lt;/p&gt;
</content><link href="/archives/利用chatgpt优化亚马逊1.0/"/><published>2023-02-11T08:00:00+08:06</published></entry><entry><id>/archives/AI的时代来临了/</id><title>AI的时代来临了</title><updated>2024-03-16T06:01:33.815438+00:00</updated><author><name>Leslie</name><email>lesliezhang08@gmail.com</email><uri>https://blog.lesliemm.xyz</uri></author><content>&lt;p&gt;2023年3月15日，美国时间3月14日，这是值得被铭记的一天。因为这一天，距离chatgpt gpt-3.5发布仅仅106天，gpt4诞生了。仅仅100天，ai的质量进步了不止一个量级，已经从婴儿般理解低难度会话，进步到了理解图片内容了。更加恐怖的是，据说年底gpt5就又要发布了。&lt;br&gt;
ai给生活带来的改变是显而易见的，以我自身为例，我从需要同事帮忙花大量时间写日语，到现如今chatgpt5分钟写出的日语比同事还要好。而这一个月也仅仅需要140块钱而已。&lt;/p&gt;
&lt;p&gt;三体中描述人类未来世界里，进行了一次语言大融合，无论中国人还是外国人，语言都是中英结合。在我看来，ai的出现加速了这一部分的进度，甚至可以预见，在不久的将来，一款可以联网的耳机就可以代替现阶段的同声传译设备了。&lt;/p&gt;
&lt;p&gt;现如今，基于chatgpt的各种应用如雨后春笋一般冒出，令我印象最深的则是chatpdf，他可以读取pdf内容，回答基于pdf内容的各种问题。也就是说，将我们的任何信息记录成pdf以后，就可以创造一个属于我们自身的机器人，来回答解决各种问题，学习各种知识。&lt;/p&gt;
&lt;p&gt;另外，我个人是如何使用chatgpt的呢？最大的帮助就是个人助理。帮我安排行程，帮我翻译，帮我总结。我利用快捷指令和chatgpt的api创建了多个低代码应用，这些应用虽然不是那么的智能，但是因为是自己独立创建的，并且也确实解决了一些问题，让我感到十分快乐。&lt;/p&gt;
&lt;p&gt;最后，AI不会淘汰人类，只有拒绝AI的人才会被淘汰。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/lesnolie/Marverick/issues/30"&gt;AI的时代来临了 &lt;/a&gt;&lt;/p&gt;
</content><link href="/archives/AI的时代来临了/"/><published>2023-03-16T08:00:00+08:06</published></entry><entry><id>/archives/尝试用chatgpt-4写代码/</id><title>尝试用chatgpt-4写代码</title><updated>2024-03-16T06:01:33.815419+00:00</updated><author><name>Leslie</name><email>lesliezhang08@gmail.com</email><uri>https://blog.lesliemm.xyz</uri></author><content>&lt;p&gt;推特上有一个基于slack的读文章机器人，能够讲网页内容转成文本，让chatgpt读取，我尝试利用chatgpt-4改成telegram bot，失败了。&lt;/p&gt;
&lt;p&gt;失败的地方在于chatgpt的版本资料停留在2021年，所以导致许多模块的不兼容。目前我没有什么好的办法去解决这件事。&lt;/p&gt;
&lt;p&gt;对于我来说，目前基于快捷指令的低代码平台仍旧是我写代码的首选。其实这么久以来，写代码并不难，因为他只是在逻辑上不停的实现一些东西，就好像英语日语，都是存在逻辑上的东西的，抓住逻辑，就可以顺利解决你想要的东西。&lt;/p&gt;
&lt;p&gt;继续加油。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/lesnolie/Marverick/issues/32"&gt;尝试用chatgpt-4写代码 &lt;/a&gt;&lt;/p&gt;
</content><link href="/archives/尝试用chatgpt-4写代码/"/><published>2023-03-17T08:00:00+08:06</published></entry><entry><id>/archives/ai画图不属于我/</id><title>ai画图不属于我</title><updated>2024-03-16T06:01:33.815400+00:00</updated><author><name>Leslie</name><email>lesliezhang08@gmail.com</email><uri>https://blog.lesliemm.xyz</uri></author><content>&lt;p&gt;这两天开通了midjounery和leondor.ai，画出来的图简直一个比一个丑。&lt;br&gt;
用prompt，用同一个模型，参数，做出来的图就是比别人丑。&lt;br&gt;
用image2image，出来的图简直不是人。&lt;br&gt;
不得不说midjounery可玩性还是非常强的，也非常的已用，但是他只能输出他自己已经理解的东西，无法输出他不理解的东西。比如我让她画珍珠手机吊绳，它输出的全是珍珠项链。&lt;br&gt;
打开推特，看到了一句话:你永远无法赚到你认知以外的钱，换句话说，你永远无法让ai输出你认知以外的东西。&lt;br&gt;
嗯，ai亦然，它也无法输出它理解不了的东西。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/lesnolie/Marverick/issues/33"&gt;ai画图不属于我 &lt;/a&gt;&lt;/p&gt;
</content><link href="/archives/ai画图不属于我/"/><published>2023-03-23T08:00:00+08:06</published></entry><entry><id>/archives/记第一次搭建软路由（旁路由）/</id><title>记第一次搭建软路由（旁路由）</title><updated>2024-03-16T06:01:33.815380+00:00</updated><author><name>Leslie</name><email>lesliezhang08@gmail.com</email><uri>https://blog.lesliemm.xyz</uri></author><content>&lt;p&gt;于是，我终于搭建了属于自己的路由器。&lt;br&gt;
于是，我终于人到中年。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;早就想要折腾路由器了，从开始折腾梅林算起，到如今已经有十多年了。其中，因自身的原因有个3，4年空窗期，但是自己对于折腾的喜爱还是停不下来。&lt;br&gt;
先来介绍硬件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NUC 12 华尔街峡谷&lt;/li&gt;
&lt;li&gt;32G内存条&lt;/li&gt;
&lt;li&gt;520G硬盘，nvme.m2协议
嗯，我将其设置成了旁路由。一方面是这台路由器只有一个网口，另一方面是我觉得旁路由才是居家的最终形态。   &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;使用windows11为主系统，然后在hyper-v中虚拟了istoreos。接着设置了路由器端和手机端，果然，无法上网。&lt;br&gt;
是什么原因呢？在网上找到了这样两篇内容：&lt;br&gt;
&lt;a href="https://www.right.com.cn/forum/thread-5512947-1-1.html"&gt;Openwrt 作为旁路网关（不是旁路由！！）正确配置方法，性能测试 —— 破解迷思&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;amp;tid=2983767"&gt;【终极指南】关于N1做旁路由添加 iptables 自定义防火墙规则的见解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后我决定，再添加一个wan口，然后将lan口桥接关闭。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://github.com/lesnolie/Marverick/issues/34"&gt;记第一次搭建软路由（旁路由）&lt;/a&gt;&lt;/p&gt;
</content><link href="/archives/记第一次搭建软路由（旁路由）/"/><published>2023-06-20T08:00:00+08:06</published></entry><entry><id>/archives/这可能是我用过的最好用的背景去除工具——tools篇一：PIXIAN.AI/</id><title>这可能是我用过的最好用的背景去除工具——tools篇一：PIXIAN.AI</title><updated>2024-03-16T06:01:33.815359+00:00</updated><author><name>Leslie</name><email>lesliezhang08@gmail.com</email><uri>https://blog.lesliemm.xyz</uri></author><content>&lt;h2&gt;2024第一篇，2023年没有怎么发推，因为太懒了。2024估计也改不掉懒的毛病，但是我觉得还是需要把日常使用的工具记录一下，方便以后分享或者总结。也算是给自己开一个新篇章:tools篇&lt;/h2&gt;
&lt;h2&gt;什么是背景去除工具&lt;/h2&gt;
&lt;p&gt;背景去除工具，简单讲就是抠图。我个人常用场景是：网图只想使用其中的某个元素，之前只能通过PS一点一点抠图，为此还学了很多方法：什么蒙板、钢笔等等等等。现在，得益于AI的发展迅速，迭代了许许多多的抠图工具，今天我就要介绍一款我所使用过的最好用的工具：&lt;a href="https:pixian.ai"&gt;Pixian.ai&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 100.82256169212691" &gt;&lt;img loading="lazy" width="1716" height="851" src="https://github.com/lesnolie/Marverick/assets/81410185/44241a36-6ffe-4610-8e50-772fdba10b48" /&gt;&lt;figcaption&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;有什么功能&lt;/h2&gt;
&lt;p&gt;这个网站的交互非常简单：&lt;br&gt;
将图片拖入方框内就可以了。非常的全自动。&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 111.78918169209432" &gt;&lt;img loading="lazy" width="1612" height="721" src="https://github.com/lesnolie/Marverick/assets/81410185/c6ffb61e-28ba-4788-86e7-fd7b0361a95a" /&gt;&lt;figcaption&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;之后，可以设置纯色背景，可以设置尺寸等等。&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 299.54545454545456" &gt;&lt;img loading="lazy" width="1318" height="220" src="https://github.com/lesnolie/Marverick/assets/81410185/5d601a27-8ef3-4070-a3d0-f791009072a1" /&gt;&lt;figcaption&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;为什么说是最好的去背景工具&lt;/h2&gt;
&lt;p&gt;很简单，因为没有广告，不收费。
其他网站如果你想获得高清图片的话，必须注册付费才能下载。但是这个网站没有这个烦恼，直接输出你想要的。&lt;/p&gt;
&lt;h2&gt;有什么值得注意的地方&lt;/h2&gt;
&lt;p&gt;有尺寸限制，需要你自行进行探索&lt;/p&gt;
&lt;p&gt;-end-&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/lesnolie/Marverick/issues/35"&gt;这可能是我用过的最好用的背景去除工具——tools篇一：PIXIAN.AI&lt;/a&gt;&lt;/p&gt;
</content><link href="/archives/这可能是我用过的最好用的背景去除工具——tools篇一：PIXIAN.AI/"/><published>2024-01-31T08:00:00+08:06</published></entry><entry><id>/archives/tools篇二：一款图片高清修复工具/</id><title>tools篇二：一款图片高清修复工具</title><updated>2024-03-16T06:01:33.815335+00:00</updated><author><name>Leslie</name><email>lesliezhang08@gmail.com</email><uri>https://blog.lesliemm.xyz</uri></author><content>&lt;p&gt;很快，我们就来到了第二篇：图片高清放大工具——&lt;a href="https://replicate.com/jingyunliang/swinir"&gt;swinir&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这是一个开源的图片高清修复工具，你可以在它的主页找到github仓库地址。&lt;br&gt;
打开的是一个ONLINE的网站，但是这个网站在使用的过程中，经常会遇到内存不足的问题，所以需要自己亲手去&lt;a href="https://colab.research.google.com/gist/JingyunLiang/a5e3e54bc9ef8d7bf594f6fee8208533/swinir-demo-on-real-world-image-sr.ipynb"&gt;google cloab&lt;/a&gt;设置。&lt;/p&gt;
&lt;p&gt;按照顺序一路下行，在第二点将第二点的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test_patch_wise = FALSE
```&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;改为true&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 162.64150943396226" &gt;&lt;img loading="lazy" width="1724" height="530" src="https://github.com/lesnolie/Marverick/assets/81410185/3033d1c4-6bb1-4187-8ffd-43a1c4488c71" /&gt;&lt;figcaption&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后下载即可。&lt;br&gt;
修复效果十分惊人，请自行尝试。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/lesnolie/Marverick/issues/36"&gt;tools篇二：一款图片高清修复工具&lt;/a&gt;&lt;/p&gt;
</content><link href="/archives/tools篇二：一款图片高清修复工具/"/><published>2024-01-31T08:00:00+08:06</published></entry><entry><id>/archives/捣鼓点网络：Hyper-V下PaoPaoDns&amp;&amp;PaoPaoGateway——利用DNS分流，加速网络/</id><title>捣鼓点网络：Hyper-V下PaoPaoDns&amp;&amp;PaoPaoGateway——利用DNS分流，加速网络</title><updated>2024-03-16T06:01:33.815292+00:00</updated><author><name>Leslie</name><email>lesliezhang08@gmail.com</email><uri>https://blog.lesliemm.xyz</uri></author><content>&lt;p&gt;为什么我喜欢捣鼓网络呢？一则网络确实是日常所需，最常接触；二是我能接触到的网络技术也确实简单：理解了网络拓扑，流量走向，安装相应的软件，网上还都有教程；三则事后反馈也是即时的，成就感颇高。&lt;/p&gt;
&lt;p&gt;最近觉得openwrt的Homeproxy不好用。我都学会了写sing-box的配置文件，却对Homeproxy束手无策。Onedrive和canva竟然都访问不了，dns还时常出岔子。于是在网上冲浪的过程中邂逅了一篇文章，文章本身介绍利用singbox和mosdns进行分流，mosdns发现国内dns就直接直连，国外dns则通过singbox的fakeip模式进行代理。效果很好，速度很快。本人搭建成功以后，谷歌网盘的下载速度能达到40/ms。&lt;/p&gt;
&lt;p&gt;不过我一直记得作者说的一句话：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;“因为家里只有一台openwrt设备，无法使用PaoPaoDns&amp;amp;&amp;amp;PaoPaoGateway所以才这么做”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;本文主讲基于Hyper-V虚拟机下，旁路由模式进行PaoPaoDns&amp;amp;&amp;amp;PaoPaoGateway的安装设置。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;网络拓扑&amp;amp;原理&lt;/h2&gt;
&lt;p&gt;&lt;figure style="flex: 82.94573643410853" &gt;&lt;img loading="lazy" width="642" height="387" src="https://github.com/lesnolie/Marverick/assets/81410185/9bd72574-0a42-445e-aa06-8e6c61c7970f" /&gt;&lt;figcaption&gt;paopaodns&amp;&amp;paopaogateway官方示例&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直连直接走主路由，只有代理才走网关。也就是说，即使paopaodns&amp;amp;&amp;amp;paopaogateway都坏了，旁路由崩溃了，因为有备用DNS的存在，你整个家庭网络系统仍然可以正常运行。&lt;/li&gt;
&lt;li&gt;PaoPaoGateway 不需要硬盘&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure style="flex: 50.16181229773463" &gt;&lt;img loading="lazy" width="620" height="618" src="https://github.com/lesnolie/Marverick/assets/81410185/81736437-1f01-4558-a875-6bae920c31f1" /&gt;&lt;figcaption&gt;本人理解的拓扑——direct&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 50.4071661237785" &gt;&lt;img loading="lazy" width="619" height="614" src="https://github.com/lesnolie/Marverick/assets/81410185/3164a5d3-35e8-48fc-8740-71cad1df6310" /&gt;&lt;figcaption&gt;本人理解的拓扑——prxoy&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而普通的openwrt，无论直连和代理，都需要走一遍openwrt，所以，速度不言而喻。&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 40.2672718103883" &gt;&lt;img loading="lazy" width="1597" height="1983" src="https://github.com/lesnolie/Marverick/assets/81410185/34e73d52-d1e7-4201-b3e0-93a068bfde9e" /&gt;&lt;figcaption&gt;其他拓扑解析&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;安装PaoPaoDns&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;基于Apline-linux安装，因为他小巧易用。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;一、安装 Alpine Linux&lt;/h3&gt;
&lt;p&gt;　　1.1. 前往 &lt;a href="https://www.alpinelinux.org/downloads/"&gt;Alpine 官网&lt;/a&gt;下载安装镜像，这里选用 Virtual 镜像（只有小小的30M+），安装完系统空间占用大概 132MB 左右；
　　1.2. 使用上述镜像创建一台 Hyper-V 二代虚拟机（记得关闭安全启动），并启动；
       1.3. 因为Alpine刚装完是只读状态，一定要进行设置，否则重启就还原。（我在这里纠结了一下午）
       示例设置流程&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 使用 root 超级用户直接登录
localhost login: root
# 运行 setup-alpine 安装程序
localhost:~# setup-alpine
# 询问键盘布局设置，直接输入 cn ，并回车
Select keyboard layout [none]: cn
# 询问字符集设置，直接输入 cn ，并回车
Select variant []: cn
# 询问主机名设置，如无特殊需要直接回车即可（仅能由小写英文字母及英文横杠组成）
Enter system hostname (short form, e.g. 'foo') [localhost]: 
# 选择将用于外网连接的网卡，如无特殊需，求直接回车使用默认的 eth0 即可
Which one do you want to initialize? (or '?' or 'done') [eth0]
# 询问主机 IP 获取方式，如无特殊需求，直接回车使用默认的 DHCP 获取方式即可
Ip address for eth0? (or 'dhcp', 'none', '?') [dhcp] 
# 询问是否需要手动配置其它特殊的网络设置，无特殊需求直接回车，默认“否”即可
Do you want to do any manual network configuration? [no]
# 设置 root 超级用户密码（需重复一遍，不能是弱密码，位数要求高于六位，为了安全设置时不显示任何字符）
Changing password for root
New password: 
Retype password: 
# 询问时区设置，直接输入 Asia/Shanghai 并回车即可
Which timezone are you in? ('?' for list) [UTC] Asia/Shanghai
# 询问是否设置 HTTP/FTP 代理，无特殊需求直接回车不配置即可
HTTP/FTP proxy URL? (e.g. 'http://proxy:8080', or 'none') [none]
# 询问软件包镜像源配置，国内的推荐选择域名后缀为 edu.cn 的其中一个，根据自己的网络来选
Enter mirror number (1-44) or URL to add (or r/f/e/done) [f]: 23
# 询问使用哪个 SSH server 程序，无特殊需求直接回车使用默认的 openssh 即可
Which SSH server? ('openssh', 'dropbear' or 'none') [openssh] 
# 询问使用哪个 NTP client 时间同步校对客户端，无特殊需求直接回车使用默认的 chrony 即可
Which NTP client to run? ('busybox', 'openntpd', 'chrony' or 'none') [chrony] 
# 询问将哪块硬盘用于配置 Alpine Linux 环境，根据自己需求输入对应硬盘并回车即可
Which disk(s) would you like to use? (or '?' for help or 'none') [none] sda
# 询问上面选择的硬盘用途，直接输入 sys 并回车用于安装 Alpine Linux 系统即可
How would you like to use it? ('sys', 'data', 'lvm' or '?' for help) [?] sys
# 告知将格式化整块磁盘，询问是否继续，输入 y 并回车选择“是”继续即可
WARNING: Erase the above disk(s) and continue? [y/N]: y

# 之后就是等待安装完成提示重启即可（记得提前弹出CD-ROM/DVD）
reboot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注：弹出CD-ROM/DVD需要在HYPER-V，Alpine的设置处弹出，这里不再进行截图，请自行寻找。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;14. 设置网络：setup-interfaces，设置IP，这个IP就是以后你的DNS的IP。**比如我设置的是192.168.50.2**

&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;二、安装docker&lt;/h3&gt;
&lt;p&gt;有一个&lt;a href="https://gist.github.com/rupertbenbrook/99a02725934f91a280d154800d541634"&gt;Alpine的脚本&lt;/a&gt;，但是这个脚本我直接运行总是没效果，所以我就把脚本里面的所有命令手打了一遍，效果拔群，你们也可以试试。&lt;/p&gt;
&lt;h3&gt;三、安装PaoPaoDns&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;如果你的网络环境访问Dokcer镜像有困难，可以尝试使用&lt;a href="https://mirror.sjtu.edu.cn/docs/docker-registry"&gt;上海交大&lt;/a&gt;的镜像。&lt;/em&gt;&lt;br&gt;
官方建议使用docker-compose进行安装，方便更新以及更新配置：&lt;/p&gt;
&lt;h1&gt;修改 192.168.50.3 为你自己的网关(你准备设置的PaoPaoGateway)地址，其他无需修改&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;version: "3"

services:
  paopaodns:
    image: sliamb/paopaodns:latest
    container_name: PaoPaoDNS
    restart: always
    volumes:
      - /home/paopaodns:/data
    environment:
      - TZ=Asia/Shanghai
      - UPDATE=weekly
      - DNS_SERVERNAME=PaoPaoDNS,blog.03k.org
      - DNSPORT=53
      - CNAUTO=yes
      - CNFALL=yes
      - CN_TRACKER=yes
      - USE_HOSTS=no
      - IPV6=no
      - SOCKS5=192.168.50.3:1080
      - SERVER_IP=10.10.10.8
      - CUSTOM_FORWARD=192.168.50.3:53
      - AUTO_FORWARD=yes
      - AUTO_FORWARD_CHECK=yes
      - USE_MARK_DATA=yes
      - HTTP_FILE=yes
    ports:
      - "53:53/udp"
      - "53:53/tcp"
      - "5304:5304/udp"
      - "5304:5304/tcp"
      - "7889:7889/tcp"&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然，你也可以直接使用docker进行安装（我就是这样）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#拉取最新的docker镜像
docker pull sliamb/paopaodns:latest
#设置环境变量
#修改 192.168.50.3 为你自己的网关(你准备设置的PaoPaoGateway)地址，其他无需修改
docker run -d \
--name paopaodns \
-v /home/mydata:/data \
-e UPDATE=weekly \
-e CNAUTO=yes \
-e CNFALL=yes \
-e CN_TRACKER=yes \
-e IPV6=no \
-e CUSTOM_FORWARD=192.168.50.3:53  \
-e  AUTO_FORWARD=yes   \
-e  AUTO_FORWARD_CHECK=yes \
-e  USE_MARK_DATA=yes \
-e  CN_TRACKER=yes \
-e  ADDINFO=yes \
-e  SHUFFLE=yes \
-e  RULES_TTL=604800 \
-e  TZ=Asia/Shanghai \
--restart unless-stopped \
-p 53:53/tcp -p 53:53/udp \
-p 5304:5304/tcp -p 5304:5304/udp \
sliamb/paopaodns&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;四、安装备用DNS&lt;/h3&gt;
&lt;p&gt;你可以再安装一个PaoPaodns作为备用dns，当其中一个崩溃时另一个仍能运行。
并且听说ikuai必须设置两个dns。
不知道能不能在远程运行一个PaoPaoDns作为备用Dns服务器，你可以试试，我觉得可行。....&lt;/p&gt;
&lt;h3&gt;五、安装PaoPaoGateway&lt;/h3&gt;
&lt;p&gt;随便找一个能运行docker的机器，刚才Alpine就可以。&lt;/p&gt;
&lt;p&gt;创建目录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir iso&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进入目录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd iso&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5.1.1 network.ini配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ip=192.168.50.3
mask=255.255.255.0
gw=192.168.50.1
dns1=192.168.50.2
dns2=备用DNS&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参数解释：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;ip：PaoPaoGateWay的IP要和PaoPaoDNS的-e CUSTOM_FORWARD=192.168.50.3:53一致。
   gw：主路由的IP.
   dns1:PaoPaoDNS（主）的IP
   dns2:PaoPaoDNS（备）的IP&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;5.1.2 ppgw.ini配置
下面参数根据实际修改。&lt;/p&gt;
&lt;p&gt;主要参数：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;clash_web_password="password" # 管理面板的密码password
   dns_ip=192.168.50.2 # PaoDNS（主）
   ex_dns="192.168.50.2:53" # PaoDNS（主）
   model建议使用yaml，因为clash的proxies比较容易写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;配置如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#paopao-gateway

# mode=socks5|ovpn|yaml|suburl|free
# default: socks5
mode=yaml

# Set fakeip's CIDR here
# default: fake_cidr=7.0.0.0/8
fake_cidr=11.0.0.0/8

# Set your trusted DNS here
# default: dns_ip=1.0.0.1
# 使用PaoPaoDNS这里就设置PaoDNS的地址
dns_ip=192.168.50.2
# default: dns_port=53
# If used with PaoPaoDNS, you can set the 5304 port
dns_port=5304

# Clash's web dashboard
clash_web_port="80"
# Clash's 面板密码
clash_web_password="password"

# default:openport=no
# socks+http mixed 1080
openport=yes

# default: udp_enable=no
udp_enable=no

# default:30
sleeptime=30

# socks5 mode settting
# default: socks5_ip=gatewayIP
socks5_ip="192.168.8.1"
# default: socks5_port="7890"
socks5_port="7890"

# ovpn mode settting
# The ovpn file in the same directory as the ppgw.ini.
# default: ovpnfile=custom.ovpn
ovpnfile="custom.ovpn"
ovpn_username=""
ovpn_password=""

# yaml mode settting
# The yaml file in the same directory as the ppgw.ini.
# default: yamlfile=custom.yaml
yamlfile="custom.yaml"

# suburl mode settting
suburl=""
subtime=1d

# fast_node=check/yes/no
fast_node=yes
test_node_url="https://cp.cloudflare.com"
ext_node="Traffic|Expire| GB|Days|Date"
cpudelay="3000"

# dns burn setting
# depand on fast_node=yes &amp;amp; mode=suburl/yaml
dns_burn=yes
# If used with PaoPaoDNS, you can set the PaoPaoDNS:53
ex_dns="192.168.50.2:53"&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5.1.3 custom.yaml配置(CLASH)
直接把你节点的proxies部分复制进来就行，但是注意复制后的格式哈。
下面是一个配置例子。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;proxies:
- name: "hysteria2"
  type: hysteria2
  server: server.com
  port: 443
  # ports: 10000-20000/443
  #  up和down均不写或为0则使用BBR流控
  # up: "30 Mbps" # 若不写单位，默认为 Mbps
  # down: "200 Mbps" # 若不写单位，默认为 Mbps
  password: yourpassword
  # obfs: salamander # 默认为空，如果填写则开启obfs，目前仅支持salamander
  # obfs-password: yourpassword
  # sni: server.com
  # skip-cert-verify: false
  # fingerprint: xxxx
  # alpn:
  #   - h3
  # ca: "./my.ca"
  # ca-str: "xyz"&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5.2 网关的编译&lt;/p&gt;
&lt;p&gt;替换clash/mihomo核心
你可以把你的amd64的clash/mihomo(就是clash-meta)二进制文件重命名为clash放到当前目录即可。通过替换clash核心，你可以支持更多的协议和规则功能，比如替换为&lt;a href="https://github.com/MetaCubeX/mihomo/releases"&gt;mihomo&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最终你的iso文件夹会是这个样子的:
&lt;figure style="flex: 207.08661417322836" &gt;&lt;img loading="lazy" width="526" height="127" src="https://github.com/lesnolie/Marverick/assets/81410185/5d39771c-87f1-4968-9d43-d4cf966441a9" /&gt;&lt;figcaption&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在iso文件夹下执行这个命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -v .:/data sliamb/ppgwiso&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等待执行完成，你的PaoPaoGateWay就会出现在文件夹下了。
下载。&lt;/p&gt;
&lt;h3&gt;六、创建PaoPaoGateway虚拟机&lt;/h3&gt;
&lt;h4&gt;运行要求和配置下发&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;虚拟机CPU&lt;/td&gt;
&lt;td&gt;x86-64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;内存&lt;/td&gt;
&lt;td&gt;最低128MB，推荐256MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;硬盘&lt;/td&gt;
&lt;td&gt;不需要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网卡&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;光驱&lt;/td&gt;
&lt;td&gt;1  &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;注意：如果节点数量很多或者连接数很多或者你的配置文件比较复杂的话，建议适当增加内存和CPU核心数&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在hyper-新建虚拟机，&lt;strong&gt;选择第一代&lt;/strong&gt;（重点），最后一步无需使用磁盘，完成后虚拟机设置加载刚才打包的 ISO镜像，直接光驱启动即可。&lt;/p&gt;
&lt;p&gt;登录面板，地址为：网关IP地址/ui&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 85.4521625163827" &gt;&lt;img loading="lazy" width="1304" height="763" src="https://github.com/lesnolie/Marverick/assets/81410185/78126142-0d89-48bb-936a-79e41fec2a3e" /&gt;&lt;figcaption&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;附我的hyper截图&amp;amp;&amp;amp;配置&lt;/h3&gt;
&lt;p&gt;&lt;figure style="flex: 325.187969924812" &gt;&lt;img loading="lazy" width="865" height="133" src="https://github.com/lesnolie/Marverick/assets/81410185/52ee282b-d10b-4c89-8ab4-b12227c15fa9" /&gt;&lt;figcaption&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;七、主路由设置&lt;/h3&gt;
&lt;p&gt;需要设置一下内容：我的主路由是梅林固件，你按照你的配置&lt;/p&gt;
&lt;p&gt;7.1 LAN-DHCP
&lt;figure style="flex: 61.57232704402516" &gt;&lt;img loading="lazy" width="979" height="795" src="https://github.com/lesnolie/Marverick/assets/81410185/01806c1a-5cd1-4c35-9b7d-0a4587461ef1" /&gt;&lt;figcaption&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;7.2 静态路由设置&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 56.84931506849315" &gt;&lt;img loading="lazy" width="996" height="876" src="https://github.com/lesnolie/Marverick/assets/81410185/23ee96ec-61e7-4cf2-94ef-346275b40556" /&gt;&lt;figcaption&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;结语&lt;/h3&gt;
&lt;p&gt;看起来麻烦，实际特别简单&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装Alpine&lt;/li&gt;
&lt;li&gt;Alpine安装docker&lt;/li&gt;
&lt;li&gt;安装PaoPaodns&lt;/li&gt;
&lt;li&gt;编译PaoPaoGateway&lt;/li&gt;
&lt;li&gt;启用PaoPaoGateway&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/lesnolie/Marverick/issues/37"&gt;捣鼓点网络：Hyper-V下PaoPaoDns&amp;amp;&amp;amp;PaoPaoGateway——利用DNS分流，加速网络&lt;/a&gt;&lt;/p&gt;
</content><link href="/archives/捣鼓点网络：Hyper-V下PaoPaoDns&amp;&amp;PaoPaoGateway——利用DNS分流，加速网络/"/><published>2024-03-16T08:00:00+08:06</published></entry></feed>