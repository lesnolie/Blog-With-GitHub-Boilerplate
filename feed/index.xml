<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>不愧不忘</title><link>/</link><description>我喜欢猫</description><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>/logo.jpg</url><title>不愧不忘</title><link>/</link></image><language>zh-CN</language><lastBuildDate>Tue, 25 Jun 2024 07:47:18 +0806</lastBuildDate><pubDate>Tue, 25 Jun 2024 07:47:18 +0806</pubDate><item><title>ai画图不属于我</title><link>/archives/ai-drawing-not-my-thing/</link><description>&lt;p&gt;这两天开通了midjounery和leondor.ai，画出来的图简直一个比一个丑。&lt;br&gt;
用prompt，用同一个模型，参数，做出来的图就是比别人丑。&lt;br&gt;
用image2image，出来的图简直不是人。&lt;br&gt;
不得不说midjounery可玩性还是非常强的，也非常的已用，但是他只能输出他自己已经理解的东西，无法输出他不理解的东西。比如我让她画珍珠手机吊绳，它输出的全是珍珠项链。&lt;br&gt;
打开推特，看到了一句话:你永远无法赚到你认知以外的钱，换句话说，你永远无法让ai输出你认知以外的东西。&lt;br&gt;
嗯，ai亦然，它也无法输出它理解不了的东西。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/lesnolie/Marverick/issues/33"&gt;ai画图不属于我 &lt;/a&gt;&lt;/p&gt;
</description><author>lesliezhang08@gmail.com (Leslie)</author><guid isPermaLink="true">/archives/ai-drawing-not-my-thing/</guid><pubDate>Thu, 23 Mar 2023 08:00:00 +0806</pubDate></item><item><title>记第一次搭建软路由（旁路由）</title><link>/archives/first-time-setup-homelab-router/</link><description>&lt;p&gt;于是，我终于搭建了属于自己的路由器。&lt;br&gt;
于是，我终于人到中年。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;早就想要折腾路由器了，从开始折腾梅林算起，到如今已经有十多年了。其中，因自身的原因有个3，4年空窗期，但是自己对于折腾的喜爱还是停不下来。&lt;br&gt;
先来介绍硬件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NUC 12 华尔街峡谷&lt;/li&gt;
&lt;li&gt;32G内存条&lt;/li&gt;
&lt;li&gt;520G硬盘，nvme.m2协议
嗯，我将其设置成了旁路由。一方面是这台路由器只有一个网口，另一方面是我觉得旁路由才是居家的最终形态。   &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;使用windows11为主系统，然后在hyper-v中虚拟了istoreos。接着设置了路由器端和手机端，果然，无法上网。&lt;br&gt;
是什么原因呢？在网上找到了这样两篇内容：&lt;br&gt;
&lt;a href="https://www.right.com.cn/forum/thread-5512947-1-1.html"&gt;Openwrt 作为旁路网关（不是旁路由！！）正确配置方法，性能测试 —— 破解迷思&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;amp;tid=2983767"&gt;【终极指南】关于N1做旁路由添加 iptables 自定义防火墙规则的见解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后我决定，再添加一个wan口，然后将lan口桥接关闭。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://github.com/lesnolie/Marverick/issues/34"&gt;记第一次搭建软路由（旁路由）&lt;/a&gt;&lt;/p&gt;
</description><author>lesliezhang08@gmail.com (Leslie)</author><guid isPermaLink="true">/archives/first-time-setup-homelab-router/</guid><pubDate>Tue, 20 Jun 2023 08:00:00 +0806</pubDate></item><item><title>tools篇二：一款图片高清修复工具</title><link>/archives/high-definition-image-restoration-tool/</link><description>&lt;p&gt;很快，我们就来到了第二篇：图片高清放大工具——&lt;a href="https://replicate.com/jingyunliang/swinir"&gt;swinir&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这是一个开源的图片高清修复工具，你可以在它的主页找到github仓库地址。&lt;br&gt;
打开的是一个ONLINE的网站，但是这个网站在使用的过程中，经常会遇到内存不足的问题，所以需要自己亲手去&lt;a href="https://colab.research.google.com/gist/JingyunLiang/a5e3e54bc9ef8d7bf594f6fee8208533/swinir-demo-on-real-world-image-sr.ipynb"&gt;google cloab&lt;/a&gt;设置。&lt;/p&gt;
&lt;p&gt;按照顺序一路下行，在第二点将第二点的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test_patch_wise = FALSE
```&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;改为true&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 162.64150943396226" &gt;&lt;img loading="lazy" width="1724" height="530" src="https://github.com/lesnolie/Marverick/assets/81410185/3033d1c4-6bb1-4187-8ffd-43a1c4488c71" /&gt;&lt;figcaption&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后下载即可。&lt;br&gt;
修复效果十分惊人，请自行尝试。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/lesnolie/Marverick/issues/36"&gt;tools篇二：一款图片高清修复工具&lt;/a&gt;&lt;/p&gt;
</description><author>lesliezhang08@gmail.com (Leslie)</author><guid isPermaLink="true">/archives/high-definition-image-restoration-tool/</guid><pubDate>Wed, 31 Jan 2024 08:00:00 +0806</pubDate></item><item><title>这可能是我用过的最好用的背景去除工具——tools篇一：PIXIAN.AI</title><link>/archives/best-background-removal-tool-pixian-ai/</link><description>&lt;h2&gt;2024第一篇，2023年没有怎么发推，因为太懒了。2024估计也改不掉懒的毛病，但是我觉得还是需要把日常使用的工具记录一下，方便以后分享或者总结。也算是给自己开一个新篇章:tools篇&lt;/h2&gt;
&lt;h2&gt;什么是背景去除工具&lt;/h2&gt;
&lt;p&gt;背景去除工具，简单讲就是抠图。我个人常用场景是：网图只想使用其中的某个元素，之前只能通过PS一点一点抠图，为此还学了很多方法：什么蒙板、钢笔等等等等。现在，得益于AI的发展迅速，迭代了许许多多的抠图工具，今天我就要介绍一款我所使用过的最好用的工具：&lt;a href="https:pixian.ai"&gt;Pixian.ai&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 100.82256169212691" &gt;&lt;img loading="lazy" width="1716" height="851" src="https://github.com/lesnolie/Marverick/assets/81410185/44241a36-6ffe-4610-8e50-772fdba10b48" /&gt;&lt;figcaption&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;有什么功能&lt;/h2&gt;
&lt;p&gt;这个网站的交互非常简单：&lt;br&gt;
将图片拖入方框内就可以了。非常的全自动。&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 111.78918169209432" &gt;&lt;img loading="lazy" width="1612" height="721" src="https://github.com/lesnolie/Marverick/assets/81410185/c6ffb61e-28ba-4788-86e7-fd7b0361a95a" /&gt;&lt;figcaption&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;之后，可以设置纯色背景，可以设置尺寸等等。&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 299.54545454545456" &gt;&lt;img loading="lazy" width="1318" height="220" src="https://github.com/lesnolie/Marverick/assets/81410185/5d601a27-8ef3-4070-a3d0-f791009072a1" /&gt;&lt;figcaption&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;为什么说是最好的去背景工具&lt;/h2&gt;
&lt;p&gt;很简单，因为没有广告，不收费。
其他网站如果你想获得高清图片的话，必须注册付费才能下载。但是这个网站没有这个烦恼，直接输出你想要的。&lt;/p&gt;
&lt;h2&gt;有什么值得注意的地方&lt;/h2&gt;
&lt;p&gt;有尺寸限制，需要你自行进行探索&lt;/p&gt;
&lt;p&gt;-end-&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/lesnolie/Marverick/issues/35"&gt;这可能是我用过的最好用的背景去除工具——tools篇一：PIXIAN.AI&lt;/a&gt;&lt;/p&gt;
</description><author>lesliezhang08@gmail.com (Leslie)</author><guid isPermaLink="true">/archives/best-background-removal-tool-pixian-ai/</guid><pubDate>Wed, 31 Jan 2024 08:00:00 +0806</pubDate></item><item><title>Hyper-V下PaoPaoDns&amp;&amp;PaoPaoGateway配置教程</title><link>/archives/hyper-v-paopao-dns-gateway-setup-guide/</link><description>&lt;p&gt;为什么我喜欢捣鼓网络呢？一则网络确实是日常所需，最常接触；二是我能接触到的网络技术也确实简单：理解了网络拓扑，流量走向，安装相应的软件，网上还都有教程；三则事后反馈也是即时的，成就感颇高。&lt;/p&gt;
&lt;p&gt;最近觉得openwrt的Homeproxy不好用。我都学会了写sing-box的配置文件，却对Homeproxy束手无策。Onedrive和canva竟然都访问不了，dns还时常出岔子。于是在网上冲浪的过程中邂逅了一篇文章，文章本身介绍利用singbox和mosdns进行分流，mosdns发现国内dns就直接直连，国外dns则通过singbox的fakeip模式进行代理。效果很好，速度很快。本人搭建成功以后，谷歌网盘的下载速度能达到40mb/s。&lt;/p&gt;
&lt;p&gt;不过我一直记得作者说的一句话：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;“因为家里只有一台openwrt设备，无法使用PaoPaoDns&amp;amp;&amp;amp;PaoPaoGateway所以才这么做”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;本文主讲基于Hyper-V虚拟机下，旁路由模式进行PaoPaoDns&amp;amp;&amp;amp;PaoPaoGateway的安装设置。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;网络拓扑&amp;amp;原理&lt;/h2&gt;
&lt;p&gt;&lt;figure style="flex: 82.94573643410853" &gt;&lt;img loading="lazy" width="642" height="387" src="https://github.com/lesnolie/Marverick/assets/81410185/9bd72574-0a42-445e-aa06-8e6c61c7970f" /&gt;&lt;figcaption&gt;paopaodns&amp;&amp;paopaogateway官方示例&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直连直接走主路由，只有代理才走网关。也就是说，即使paopaodns&amp;amp;&amp;amp;paopaogateway都坏了，旁路由崩溃了，因为有备用DNS的存在，你整个家庭网络系统仍然可以正常运行。&lt;/li&gt;
&lt;li&gt;PaoPaoGateway 不需要硬盘&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure style="flex: 50.16181229773463" &gt;&lt;img loading="lazy" width="620" height="618" src="https://github.com/lesnolie/Marverick/assets/81410185/81736437-1f01-4558-a875-6bae920c31f1" /&gt;&lt;figcaption&gt;本人理解的拓扑——direct&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 50.4071661237785" &gt;&lt;img loading="lazy" width="619" height="614" src="https://github.com/lesnolie/Marverick/assets/81410185/3164a5d3-35e8-48fc-8740-71cad1df6310" /&gt;&lt;figcaption&gt;本人理解的拓扑——prxoy&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而普通的openwrt，无论直连和代理，都需要走一遍openwrt，所以，速度不言而喻。&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 40.2672718103883" &gt;&lt;img loading="lazy" width="1597" height="1983" src="https://github.com/lesnolie/Marverick/assets/81410185/34e73d52-d1e7-4201-b3e0-93a068bfde9e" /&gt;&lt;figcaption&gt;其他拓扑解析&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;安装PaoPaoDns&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;基于Apline-linux安装，因为他小巧易用。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;一、安装 Alpine Linux&lt;/h3&gt;
&lt;p&gt;1.1. 前往 &lt;a href="https://www.alpinelinux.org/downloads/"&gt;Alpine 官网&lt;/a&gt;下载安装镜像，这里选用 Virtual 镜像（只有小小的30M+），安装完系统空间占用大概 132MB 左右；
1.2. 使用上述镜像创建一台 Hyper-V 二代虚拟机（记得关闭安全启动），并启动；
1.3. 因为Alpine刚装完是只读状态，一定要进行设置，否则重启就还原。（我在这里纠结了一下午）
&lt;strong&gt;&lt;em&gt;示例设置流程&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 使用 root 超级用户直接登录
localhost login: root
# 运行 setup-alpine 安装程序
localhost:~# setup-alpine
# 询问键盘布局设置，直接输入 cn ，并回车
Select keyboard layout [none]: cn
# 询问字符集设置，直接输入 cn ，并回车
Select variant []: cn
# 询问主机名设置，如无特殊需要直接回车即可（仅能由小写英文字母及英文横杠组成）
Enter system hostname (short form, e.g. 'foo') [localhost]: 
# 选择将用于外网连接的网卡，如无特殊需，求直接回车使用默认的 eth0 即可
Which one do you want to initialize? (or '?' or 'done') [eth0]
# 询问主机 IP 获取方式，如无特殊需求，直接回车使用默认的 DHCP 获取方式即可
Ip address for eth0? (or 'dhcp', 'none', '?') [dhcp] 
# 询问是否需要手动配置其它特殊的网络设置，无特殊需求直接回车，默认“否”即可
Do you want to do any manual network configuration? [no]
# 设置 root 超级用户密码（需重复一遍，不能是弱密码，位数要求高于六位，为了安全设置时不显示任何字符）
Changing password for root
New password: 
Retype password: 
# 询问时区设置，直接输入 Asia/Shanghai 并回车即可
Which timezone are you in? ('?' for list) [UTC] Asia/Shanghai
# 询问是否设置 HTTP/FTP 代理，无特殊需求直接回车不配置即可
HTTP/FTP proxy URL? (e.g. 'http://proxy:8080', or 'none') [none]
# 询问软件包镜像源配置，国内的推荐选择域名后缀为 edu.cn 的其中一个，根据自己的网络来选
Enter mirror number (1-44) or URL to add (or r/f/e/done) [f]: 23
# 询问使用哪个 SSH server 程序，无特殊需求直接回车使用默认的 openssh 即可
Which SSH server? ('openssh', 'dropbear' or 'none') [openssh] 
# 询问使用哪个 NTP client 时间同步校对客户端，无特殊需求直接回车使用默认的 chrony 即可
Which NTP client to run? ('busybox', 'openntpd', 'chrony' or 'none') [chrony] 
# 询问将哪块硬盘用于配置 Alpine Linux 环境，根据自己需求输入对应硬盘并回车即可
Which disk(s) would you like to use? (or '?' for help or 'none') [none] sda
# 询问上面选择的硬盘用途，直接输入 sys 并回车用于安装 Alpine Linux 系统即可
How would you like to use it? ('sys', 'data', 'lvm' or '?' for help) [?] sys
# 告知将格式化整块磁盘，询问是否继续，输入 y 并回车选择“是”继续即可
WARNING: Erase the above disk(s) and continue? [y/N]: y

# 之后就是等待安装完成提示重启即可（记得提前弹出CD-ROM/DVD）
reboot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注：弹出CD-ROM/DVD需要在HYPER-V，Alpine的设置处弹出，这里不再进行截图，请自行寻找。&lt;/p&gt;
&lt;p&gt;1.4. 设置网络：setup-interfaces，设置IP，这个IP就是以后你的DNS的IP。&lt;strong&gt;比如我设置的是192.168.50.2&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;二、安装docker&lt;/h3&gt;
&lt;p&gt;有一个&lt;a href="https://gist.github.com/rupertbenbrook/99a02725934f91a280d154800d541634"&gt;Alpine的脚本&lt;/a&gt;，但是这个脚本我直接运行总是没效果，所以我就把脚本里面的所有命令手打了一遍，效果拔群，你们也可以试试。&lt;/p&gt;
&lt;h3&gt;三、安装PaoPaoDns&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;如果你的网络环境访问Dokcer镜像有困难，可以尝试使用&lt;a href="https://mirror.sjtu.edu.cn/docs/docker-registry"&gt;上海交大&lt;/a&gt;的镜像。&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
官方建议使用docker-compose进行安装，方便更新以及更新配置：&lt;/p&gt;
&lt;h1&gt;修改 192.168.50.3 为你自己的网关(你准备设置的PaoPaoGateway)地址，其他无需修改&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;version: "3"

services:
  paopaodns:
    image: sliamb/paopaodns:latest
    container_name: PaoPaoDNS
    restart: always
    volumes:
      - /home/paopaodns:/data
    environment:
      - TZ=Asia/Shanghai
      - UPDATE=weekly
      - DNS_SERVERNAME=PaoPaoDNS,blog.03k.org
      - DNSPORT=53
      - CNAUTO=yes
      - CNFALL=yes
      - CN_TRACKER=yes
      - USE_HOSTS=no
      - IPV6=no
      - SOCKS5=192.168.50.3:1080
      - SERVER_IP=10.10.10.8
      - CUSTOM_FORWARD=192.168.50.3:53
      - AUTO_FORWARD=yes
      - AUTO_FORWARD_CHECK=yes
      - USE_MARK_DATA=yes
      - HTTP_FILE=yes
    ports:
      - "53:53/udp"
      - "53:53/tcp"
      - "5304:5304/udp"
      - "5304:5304/tcp"
      - "7889:7889/tcp"&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然，你也可以直接使用docker进行安装（我就是这样）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#拉取最新的docker镜像
docker pull sliamb/paopaodns:latest
#设置环境变量
#修改 192.168.50.3 为你自己的网关(你准备设置的PaoPaoGateway)地址，其他无需修改
docker run -d \
--name paopaodns \
-v /home/mydata:/data \
-e UPDATE=weekly \
-e CNAUTO=yes \
-e CNFALL=yes \
-e CN_TRACKER=yes \
-e IPV6=no \
-e CUSTOM_FORWARD=192.168.50.3:53  \
-e  AUTO_FORWARD=yes   \
-e  AUTO_FORWARD_CHECK=yes \
-e  USE_MARK_DATA=yes \
-e  CN_TRACKER=yes \
-e  ADDINFO=yes \
-e  SHUFFLE=yes \
-e  RULES_TTL=604800 \
-e  TZ=Asia/Shanghai \
--restart unless-stopped \
-p 53:53/tcp -p 53:53/udp \
-p 5304:5304/tcp -p 5304:5304/udp \
sliamb/paopaodns&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;四、安装备用DNS&lt;/h3&gt;
&lt;p&gt;你可以再安装一个PaoPaodns作为备用dns，当其中一个崩溃时另一个仍能运行。
并且听说ikuai必须设置两个dns。
不知道能不能在远程运行一个PaoPaoDns作为备用Dns服务器，你可以试试，我觉得可行。....&lt;/p&gt;
&lt;h3&gt;五、安装PaoPaoGateway&lt;/h3&gt;
&lt;p&gt;随便找一个能运行docker的机器，刚才Alpine就可以。&lt;/p&gt;
&lt;p&gt;创建目录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir iso&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进入目录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd iso&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5.1.1 network.ini配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ip=192.168.50.3
mask=255.255.255.0
gw=192.168.50.1
dns1=192.168.50.2
dns2=备用DNS&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参数解释：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;ip：PaoPaoGateWay的IP要和PaoPaoDNS的-e CUSTOM_FORWARD=192.168.50.3:53一致。
   gw：主路由的IP.
   dns1:PaoPaoDNS（主）的IP
   dns2:PaoPaoDNS（备）的IP&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;5.1.2 ppgw.ini配置
下面参数根据实际修改。&lt;/p&gt;
&lt;p&gt;主要参数：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;clash_web_password="password" # 管理面板的密码password
   dns_ip=192.168.50.2 # PaoDNS（主）
   ex_dns="192.168.50.2:53" # PaoDNS（主）
   model建议使用yaml，因为clash的proxies比较容易写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;配置如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#paopao-gateway

# mode=socks5|ovpn|yaml|suburl|free
# default: socks5
mode=yaml

# Set fakeip's CIDR here
# default: fake_cidr=7.0.0.0/8
fake_cidr=11.0.0.0/8

# Set your trusted DNS here
# default: dns_ip=1.0.0.1
# 使用PaoPaoDNS这里就设置PaoDNS的地址
dns_ip=192.168.50.2
# default: dns_port=53
# If used with PaoPaoDNS, you can set the 5304 port
dns_port=5304

# Clash's web dashboard
clash_web_port="80"
# Clash's 面板密码
clash_web_password="password"

# default:openport=no
# socks+http mixed 1080
openport=yes

# default: udp_enable=no
udp_enable=no

# default:30
sleeptime=30

# socks5 mode settting
# default: socks5_ip=gatewayIP
socks5_ip="192.168.8.1"
# default: socks5_port="7890"
socks5_port="7890"

# ovpn mode settting
# The ovpn file in the same directory as the ppgw.ini.
# default: ovpnfile=custom.ovpn
ovpnfile="custom.ovpn"
ovpn_username=""
ovpn_password=""

# yaml mode settting
# The yaml file in the same directory as the ppgw.ini.
# default: yamlfile=custom.yaml
yamlfile="custom.yaml"

# suburl mode settting
suburl=""
subtime=1d

# fast_node=check/yes/no
fast_node=yes
test_node_url="https://cp.cloudflare.com"
ext_node="Traffic|Expire| GB|Days|Date"
cpudelay="3000"

# dns burn setting
# depand on fast_node=yes &amp;amp; mode=suburl/yaml
dns_burn=yes
# If used with PaoPaoDNS, you can set the PaoPaoDNS:53
ex_dns="192.168.50.2:53"&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5.1.3 custom.yaml配置(CLASH)
直接把你节点的proxies部分复制进来就行，但是注意复制后的格式哈。
下面是一个配置例子。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;proxies:
- name: "hysteria2"
  type: hysteria2
  server: server.com
  port: 443
  # ports: 10000-20000/443
  #  up和down均不写或为0则使用BBR流控
  # up: "30 Mbps" # 若不写单位，默认为 Mbps
  # down: "200 Mbps" # 若不写单位，默认为 Mbps
  password: yourpassword
  # obfs: salamander # 默认为空，如果填写则开启obfs，目前仅支持salamander
  # obfs-password: yourpassword
  # sni: server.com
  # skip-cert-verify: false
  # fingerprint: xxxx
  # alpn:
  #   - h3
  # ca: "./my.ca"
  # ca-str: "xyz"&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;yaml：自定义clash的yaml配置文件出站。你可以自己写一个clash格式的yaml配置文件，clash支持多种出站协议，具体写法请看官方wiki。只写proxies:字段即可，也可以包含rules:字段。如果只有proxies:字段，在网关启动后你可以在web端选择节点；如果有rules:字段，则会按照你写的规则来执行。
5.2 网关的编译&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;替换clash/mihomo核心
你可以把你的amd64的clash/mihomo(就是clash-meta)二进制文件重命名为clash放到当前目录即可。通过替换clash核心，你可以支持更多的协议和规则功能，比如替换为&lt;a href="https://github.com/MetaCubeX/mihomo/releases"&gt;mihomo&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最终你的iso文件夹会是这个样子的:&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 207.08661417322836" &gt;&lt;img loading="lazy" width="526" height="127" src="https://github.com/lesnolie/Marverick/assets/81410185/5d39771c-87f1-4968-9d43-d4cf966441a9" /&gt;&lt;figcaption&gt;iso文件夹&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在iso文件夹下执行这个命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -v .:/data sliamb/ppgwiso&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等待执行完成，你的PaoPaoGateWay就会出现在文件夹下了。
下载。&lt;/p&gt;
&lt;h3&gt;六、创建PaoPaoGateway虚拟机&lt;/h3&gt;
&lt;h4&gt;运行要求和配置下发&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;虚拟机CPU&lt;/td&gt;
&lt;td&gt;x86-64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;内存&lt;/td&gt;
&lt;td&gt;最低128MB，推荐256MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;硬盘&lt;/td&gt;
&lt;td&gt;不需要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网卡&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;光驱&lt;/td&gt;
&lt;td&gt;1  &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;注意：如果节点数量很多或者连接数很多或者你的配置文件比较复杂的话，建议适当增加内存和CPU核心数&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在hyper-新建虚拟机，&lt;strong&gt;选择第一代&lt;/strong&gt;（重点），最后一步无需使用磁盘，完成后虚拟机设置加载刚才打包的 ISO镜像，直接光驱启动即可。&lt;/p&gt;
&lt;p&gt;登录面板，地址为：网关IP地址/ui&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 85.4521625163827" &gt;&lt;img loading="lazy" width="1304" height="763" src="https://github.com/lesnolie/Marverick/assets/81410185/78126142-0d89-48bb-936a-79e41fec2a3e" /&gt;&lt;figcaption&gt;登录面板&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;附我的hyper-v截图&lt;/h3&gt;
&lt;p&gt;&lt;figure style="flex: 325.187969924812" &gt;&lt;img loading="lazy" width="865" height="133" src="https://github.com/lesnolie/Marverick/assets/81410185/52ee282b-d10b-4c89-8ab4-b12227c15fa9" /&gt;&lt;figcaption&gt;hyper-v截图&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;七、主路由设置&lt;/h3&gt;
&lt;p&gt;需要设置一下内容：我的主路由是梅林固件，你按照你的配置&lt;/p&gt;
&lt;p&gt;7.1 LAN-DHCP
&lt;figure style="flex: 61.57232704402516" &gt;&lt;img loading="lazy" width="979" height="795" src="https://github.com/lesnolie/Marverick/assets/81410185/01806c1a-5cd1-4c35-9b7d-0a4587461ef1" /&gt;&lt;figcaption&gt;LAN-DHCP&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;7.2 静态路由设置&lt;/p&gt;
&lt;p&gt;&lt;figure style="flex: 56.84931506849315" &gt;&lt;img loading="lazy" width="996" height="876" src="https://github.com/lesnolie/Marverick/assets/81410185/23ee96ec-61e7-4cf2-94ef-346275b40556" /&gt;&lt;figcaption&gt;静态路由设置&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;结语&lt;/h3&gt;
&lt;p&gt;看起来麻烦，实际特别简单&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装Alpine&lt;/li&gt;
&lt;li&gt;Alpine安装docker&lt;/li&gt;
&lt;li&gt;安装PaoPaodns&lt;/li&gt;
&lt;li&gt;编译PaoPaoGateway&lt;/li&gt;
&lt;li&gt;启用PaoPaoGateway&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/lesnolie/Marverick/issues/37"&gt;Hyper-V下PaoPaoDns&amp;amp;&amp;amp;PaoPaoGateway配置教程&lt;/a&gt;&lt;/p&gt;
</description><author>lesliezhang08@gmail.com (Leslie)</author><guid isPermaLink="true">/archives/hyper-v-paopao-dns-gateway-setup-guide/</guid><pubDate>Sat, 16 Mar 2024 08:00:00 +0806</pubDate></item><item><title>基于systemd实现gost开机自启动的方法</title><link>/archives/systemd-gost-autostart-setup-guide/</link><description>&lt;p&gt;&lt;strong&gt;由于adspower可以使用sock5代理，所以在两个vps上使用gost创建socks5代理。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;打开&lt;a href="https://github.com/go-gost/gost"&gt;Gost仓库&lt;/a&gt;,使用脚本安装gost&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# 安装最新版本 [https://github.com/go-gost/gost/releases](https://github.com/go-gost/gost/releases)
bash &amp;lt;(curl -fsSL https://github.com/go-gost/gost/raw/master/install.sh) --install&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;[!NOTE] 
如果你是国内服务器，可以自己复制install.sh里面的代码到机器，然后添加自己的github加速地址
&lt;figure style="flex: 191.51785714285714" &gt;&lt;img loading="lazy" width="429" height="112" src="https://github.com/lesnolie/Marverick/assets/81410185/113c7666-e133-471c-9b93-732b8b7b41fc" /&gt;&lt;figcaption&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;利用systemd讲gost开机启动&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;添加service文件&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nano /etc/systemd/system/gost.service&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;内容如下&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Unit]
Description=GOSTv3-Server of GO simple tunnel
Documentation=https://gost.run/
After=network.target

[Service]
Type=simple
ExecStart=/usr/local/bin/gost -L socks5://username:password@:port_num  #修改为自己要使用的gost模式，这里我使用的是socks5
Restart=always
[Install]
WantedBy=multi-user.target&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;重现加载文件&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl daemon-reload&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;设置开机启动&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl enable gost.service&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;启动&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl start gost.service&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;查看状态&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl status gost.service&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;使用systemctl管理gost服务的完整用例如下：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 开机启动
systemctl enable gost.service
# 关闭开机启动
systemctl disable gost.service
# 启动服务
systemctl start gost.service
# 停止服务
systemctl stop gost.service
# 重启服务
systemctl restart gost.service
# 查看服务状态
systemctl status gost.service
systemctl is-active gost.service
# 结束服务进程(服务无法停止时)
systemctl kill gost.service&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://github.com/lesnolie/Marverick/issues/38"&gt;基于systemd实现gost开机自启动的方法&lt;/a&gt;&lt;/p&gt;
</description><author>lesliezhang08@gmail.com (Leslie)</author><guid isPermaLink="true">/archives/systemd-gost-autostart-setup-guide/</guid><pubDate>Thu, 21 Mar 2024 08:00:00 +0806</pubDate></item><item><title>只有真正掌握了行业知识和专业技巧的人，才能充分利用AI的巨大能量。</title><link>/archives/only-those-with-industry-knowledge-and-professional-skills-can-harness-the-power-of-ai/</link><description>&lt;p&gt;**最近对SUNO的探究让我领悟到一个深刻的真理：&lt;/p&gt;
&lt;h2&gt;只有真正掌握了行业知识和专业技巧的人，才能充分利用AI的巨大能量。**&lt;/h2&gt;
&lt;p&gt;&lt;figure style="flex: 13.8671875" &gt;&lt;img loading="lazy" width="568" height="2048" src="https://github.com/lesnolie/Marverick/assets/81410185/c759e149-b7a4-4635-933d-055caa538ffe" /&gt;&lt;figcaption&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/lesnolie/Marverick/issues/39"&gt;只有真正掌握了行业知识和专业技巧的人，才能充分利用AI的巨大能量。&lt;/a&gt;&lt;/p&gt;
</description><author>lesliezhang08@gmail.com (Leslie)</author><guid isPermaLink="true">/archives/only-those-with-industry-knowledge-and-professional-skills-can-harness-the-power-of-ai/</guid><pubDate>Sat, 30 Mar 2024 08:00:00 +0806</pubDate></item><item><title>如何使用免费的gpt-4o</title><link>/archives/how-to-use-free-gpt-4o/</link><description>&lt;h2&gt;非API&lt;/h2&gt;
&lt;p&gt;coze 可以免费使用。&lt;/p&gt;
&lt;h2&gt;API&lt;/h2&gt;
&lt;p&gt;需要部署以下几个工具。&lt;/p&gt;
&lt;h3&gt;必须&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/lanqian528/chat2api"&gt;chat2api&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MartialBE/one-api"&gt;one-api&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;注册 &lt;a href="https://burn.hair/"&gt;Burn.hair&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;非必需&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;部署 &lt;a href="https://github.com/berstend/CFTempEmail"&gt;cloudflare_temp_email&lt;/a&gt;（用于注册chatgpt）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;客户端&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;推荐 &lt;a href="https://github.com/Bin-Huang/chatbox"&gt;Chatbox&lt;/a&gt;，你也可以使用其他的客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;chat2api部署步骤&lt;/h2&gt;
&lt;h3&gt;Docker Compose 部署&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;创建一个新的目录，例如 &lt;code&gt;chat2api&lt;/code&gt;，并进入该目录：&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;chat2api
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;chat2api
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;在此目录中下载库中的 docker-compose.yml 文件：&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget&lt;span class="w"&gt; &lt;/span&gt;https://raw.githubusercontent.com/LanQian528/chat2api/main/docker-compose.yml
&lt;/pre&gt;&lt;/div&gt;
修改 docker-compose.yml 文件中的环境变量，保存后：
&lt;pre&gt;&lt;code&gt;docker-compose up -d&lt;/code&gt;&lt;/pre&gt;
使用
在网页使用，直接访问以下地址:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;http://127.0.0.1:5005&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用 API，支持传入 AccessToken 或 RefreshToken，可用 GPT-4, GPT-4o, GPTs：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl --location 'http://127.0.0.1:5005/v1/chat/completions' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer {{OpenAI APIKEY}}' \
--data '{
     "model": "gpt-3.5-turbo",
     "messages": [{"role": "user", "content": "Say this is a test!"}],
     "stream": true
   }'&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将你账号的 AccessToken 或 RefreshToken 当作 OpenAI APIKEY 传入。
如果设置了 AUTHORIZATION 环境变量，可以将设置的值当作 OpenAI APIKEY 传入进行多 Tokens 轮询。
AccessToken 获取: chatgpt 登录后，再打开 &lt;a href="https://chatgpt.com/api/auth/session"&gt;session API&lt;/a&gt; 获取 accessToken 值。
免登录 gpt-3.5 无需传入 Token。&lt;/p&gt;
&lt;h2&gt;使用cloudflare_temp_email&lt;/h2&gt;
&lt;p&gt;由于chatgpt-4o非plus用户只能3小时10条，所以使用临时邮箱注册4个账号，达到3消失40条。&lt;/p&gt;
&lt;h2&gt;部署 open-api&lt;/h2&gt;
&lt;p&gt;使用 Docker Compose 进行部署
注意：虽然启动方式有所不同，但参数设置保持不变。具体的参数设置请参考基于 Docker 部署部分。&lt;/p&gt;
&lt;p&gt;在你本机创建一个目录用于存放数据，例如 /home/ubuntu/data/one-api，注意：以下操作都是基于你处于 /home/ubuntu/data/one-api 目录下进行的。如果你的目录不是 /home/ubuntu/data/one-api，请自行进入到你的目录。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ./data/mysql
mkdir -p ./data/one-api&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下载 docker-compose.yml 文件到你的本地目录（上面的列子是：/home/ubuntu/data/one-api）。&lt;/p&gt;
&lt;p&gt;修改 docker-compose.yml 文件，将你需要的环境变量填入。如果你想使用配置文件，可以下载配置文件，并重命名为 config.yaml 放入 ./data/one-api 目录中。&lt;/p&gt;
&lt;p&gt;启动服务：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up -d&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启动服务后，你可以通过运行以下命令来查看部署状态：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose ps&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;请确保所有的服务都已经成功启动，并且状态为 'Up'。&lt;/p&gt;
&lt;h2&gt;使用&lt;/h2&gt;
&lt;p&gt;将 burn.hair 和导入 one-api&lt;/p&gt;
&lt;h2&gt;客户端使用&lt;/h2&gt;
&lt;p&gt;使用 One-api 的地址和令牌即可。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/lesnolie/Marverick/issues/40"&gt;如何使用免费的gpt-4o&lt;/a&gt;&lt;/p&gt;
</description><author>lesliezhang08@gmail.com (Leslie)</author><guid isPermaLink="true">/archives/how-to-use-free-gpt-4o/</guid><pubDate>Mon, 03 Jun 2024 08:00:00 +0806</pubDate></item><item><title>搭建Hysteria2版本gost实现高速中转</title><link>/archives/build-hysteria2-gost-high-speed-proxy/</link><description>&lt;p&gt;GOST可以中转流量，无论是直接转发还是加密隧道转发，都是一个非常好的工具，能够解决我们日常某些节点无法访问的情况。但是GOST由于加密解密以及协议，速度不甚理想，已知hysteria基于UDP，速度非常的快。那么是否可以两者相结合？&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/happyharryh/gost"&gt;happyharryh/gost&lt;/a&gt;该项目就解决了这个问题。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;使用方法&lt;/h2&gt;
&lt;h3&gt;[Connector/Transporter] WireGuard&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;用法&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./gost -L :8080 -F wg://?c=proxy.conf&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;仅支持作为WireGuard客户端，且只能作为代理链的第一级。&lt;/li&gt;
&lt;li&gt;proxy.conf配置请参考 &lt;a href="https://github.com/pufferffish/wireproxy/blob/master/README.md"&gt;wireproxy&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;[Listener/Transporter] Hysteria-QUIC&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;使用Apernet魔改的quic-go加快QUIC传输速度&lt;/strong&gt;&lt;br&gt;
其他参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;send_mbps: 数据发送速率，等于0则使用BBR(默认)，大于0则使用Brutal&lt;/li&gt;
&lt;li&gt;recv_window_conn: 流接收窗口大小&lt;/li&gt;
&lt;li&gt;recv_window: 连接接收窗口大小&lt;/li&gt;
&lt;li&gt;max_conn_client (仅服务端): 单客户端最大活跃连接数&lt;/li&gt;
&lt;li&gt;cipher: 考虑到QUIC本身自带TLS加密，这里将原版gost的cipher算法简化，提升性能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;[Handler/Connector] Zero&lt;/h3&gt;
&lt;blockquote&gt;&lt;p&gt;极简化连接逻辑，实现0-RTT连接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;用法&lt;/strong&gt;
服务端&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./gost -L zero://:1234&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;客户端&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./gost -L :8080 -F zero://server_ip:1234&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其他参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mitm (仅客户端): 使用中间人(MITM)协助握手的地址列表，可缩减端到端TLS握手产生的RTT，格式同路由控制&lt;/li&gt;
&lt;li&gt;mitm_caroot (仅客户端): 根证书路径，默认为~/.mitmproxy，需要将该目录下的mitmproxy-ca-cert.cer添加为受信任的根证书颁发机构证书&lt;/li&gt;
&lt;li&gt;mitm_insecure (仅客户端): 是否跳过网站证书验证&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;[其他]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;添加 -R 命令行参数，用于指定重试次数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加 LOGFLAGS 环境变量，用于自定义日志输出格式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修复单独使用 0.0.0.0 或 [::] 时会同时监听两者的问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bypass 添加 resolve 选项，用于使IP/CIDR规则匹配解析后的域名&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;克隆说明
本 Fork 包含 git 子仓库，克隆时需要增加 --recursive 选项&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/happyharryh/gost.git&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 Windows 平台克隆后，还需要手动重建一次软链接&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd gost
git -c core.symlinks=true checkout .&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;实例：本地软路由和国外静态IP互通&lt;/h2&gt;
&lt;p&gt;我自己将本地软路由和国外静态IP通过gost互通，使用如下指令：&lt;/p&gt;
&lt;p&gt;本地命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nohup ./gost -L=socks5://:6666 -F='quic://xxxx:port?send_mbps=50&amp;amp;keepalive=true' &amp;gt; gost_client.log 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将本地和日本服务器连接到一起。&lt;/p&gt;
&lt;p&gt;日本服务器命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/root/gost_hy/gost/gost -L=quic://:port?send_mbps=100 -F socks5://156.xxxx:port&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过以上配置，能够实现高速稳定的中转，解决某些节点无法访问的问题，同时利用Hysteria-QUIC的大幅提升传输速度。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/lesnolie/Marverick/issues/41"&gt;搭建Hysteria2版本gost实现高速中转&lt;/a&gt;&lt;/p&gt;
</description><author>lesliezhang08@gmail.com (Leslie)</author><guid isPermaLink="true">/archives/build-hysteria2-gost-high-speed-proxy/</guid><pubDate>Sat, 08 Jun 2024 08:00:00 +0806</pubDate></item><item><title>AI是我的程序员</title><link>/archives/{'success': False, 'errors': [{'code': 7000, 'message': 'No route for that URI'}], 'messages': [], 'result': 'None'}/</link><description>&lt;p&gt;1.AI无法替代程序员
2.对我来说，AI是我的程序员
3.我可以利用AI做许许多多的事情&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/lesnolie/Marverick/issues/42"&gt;AI是我的程序员&lt;/a&gt;&lt;/p&gt;
</description><author>lesliezhang08@gmail.com (Leslie)</author><guid isPermaLink="true">/archives/{'success': False, 'errors': [{'code': 7000, 'message': 'No route for that URI'}], 'messages': [], 'result': 'None'}/</guid><pubDate>Tue, 25 Jun 2024 08:00:00 +0806</pubDate></item></channel></rss>